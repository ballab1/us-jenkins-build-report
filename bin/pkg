#! /usr/bin/env bash

# https://stackoverflow.com/questions/29011295/compile-clojure-source-into-class-aot-from-command-line-not-using-lein

# This "simple" compile and jar packaging approach will handle building jars
# when a git cloned library repo is present in deps.edn AND we want the jar
# to consist only of compiled code. Neither gradle nor maven can produce a
# jar in this scenario as neither can handle a git source based dependency
# in the classpath. A compiled library is required.
#
# Alternate approaches like capsule, OneJAR, and depstar don't provide complete
# byte code compilation and possibly require clojure/clj to be installed. The
# "simple" approach handles either build scenario and we get source code
# obfuscation through compilation. No other dependencies other than a JRE are
# required to run the resulting jar.
#
# A side benefit is that we can compile and package without the need to
# install gradle or maven.

if [ "$#" != 1 ]; then
   echo ""
   echo "Usage: $(dirname $0)/pkg Main-Namespace ('none' is valid)"
   echo ""
else
   # Ensure we are executing in the project directory.
   cd $(dirname $0)/..

   proj_dir=$PWD
   source etc/utils.shlib
   set_revision

   # Prepare env
   cd $proj_dir
   target_dir=$proj_dir/target
   classes_dir=$target_dir/.classes
   deps_dir=$target_dir/.deps

   if [ -z ${JAR_DIR} ]; then
     JAR_DIR=$target_dir/lib
   fi

   if [ -z ${MAIN_NS} ]; then
     MAIN_NS=$1
   fi
   compile_and_package
fi
