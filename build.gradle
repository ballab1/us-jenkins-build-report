plugins {
  // https://github.com/gradle-clojure/gradle-clojure
  id "gradle-clojure.clojure" version "0.4.0"

  // http://imperceptiblethoughts.com/shadow/ 
  id 'com.github.johnrengelman.shadow' version '2.0.4'

  // https://github.com/patrikerdes/gradle-use-latest-versions-plugin
  // Usage: gradle useLatestVersions && gradle useLatestVersionsCheck
  id 'se.patrikerdes.use-latest-versions' version '0.2.3'
  id 'com.github.ben-manes.versions' version '0.20.0'
}

group = 'org.sample'

// Readlines returns an array of lines. Pick first line.
version = new File('./.revision').readLines('UTF-8')[0]

description = 'uS-lib: write description'

// https://github.com/gradle-clojure/gradle-clojure/blob/master/docs/README.md#clojure-that-depends-on-java
sourceSets {
   main {
     clojure.srcDirs = ['src/main/clj']
     resources.srcDirs = ['src/resources']
   }
   test {
    clojure.srcDirs = ['src/test/clj']
   }
}

configurations {
   preCompile.extendsFrom compile
}

def print_sourceSet (int index) {
   print("Source set=> ");
   println(sourceSets[index]);
   println sourceSets[index].properties
   .sort{it.key}
   .collect{it}
   .findAll{!['class', 'active'].contains(it.key)}
   .join('\n')
}

//print_sourceSet(1);

// https://gradle-clojure.github.io/gradle-clojure/
clojure {
  builds {
    // 'main' builds corresponding main sourceSet
    main {
      // sourceSets[0] => dev; sourceSets[1] => main; sourceSets[2] => tests
      //sourceSet = sourceSets[1]

      //reflection = 'warn' // defaults to 'silent', can also be 'warn'

      // Configuration of the check<Build>Clojure task
      //checkAll() // checks any namespaces found in the source set

      // Configuration of the compile<Build>Clojure task
      compiler {
        disableLocalsClearing = true // defaults to false
        elideMeta = ['doc', 'file'] // defaults to empty list
        directLinking = true // defaults to false
      }
      // Comment out if you want to bundle jar with *.clj source instead
      aotAll() // aots any namespaces found in the source set
    }
  }
}

repositories {
    // gradle-clojure.clojure
    jcenter() 
    mavenCentral()

    maven {
       name = 'clojars'
       url = 'https://clojars.org/repo/'
    }

    maven {
       name = 'my.datomic.com'
       url = 'https://my.datomic.com/repo/'

       // Provide credential values in gradle.properties.
       credentials {
          username = "$datomicUser"
          password = "$datomicPassword"
       }
    }

    flatDir {
        dirs 'lib'
    }
}

// https://gist.github.com/jashatton/3237323
// Read pom.xml generated by clojure -Spom
dependencies {
    def pomXml = new XmlSlurper().parse('pom.xml')
    def pomDependencies = pomXml.dependencies.dependency

    pomDependencies.each { dependency ->
        def dependencySpec = "${dependency.groupId}:${dependency.artifactId}:${dependency.version}"

        if (dependency.scope == 'test') {
            dependencies.add 'testCompile', dependencySpec
        } else {
            dependencies.add 'compile', dependencySpec
        }
    }
}

jar {
   manifest {
     attributes(
       'Title': "uS-lib",
       'SCM-Revision': "${version}",
       'Class-Path': configurations.compile.collect {it.getName()}.join(' '),
       'Main-Class': "msa.core",
       'Built-By'       : System.properties['user.name'],
       'Build-Timestamp': java.time.Instant.now(),
       'Created-By'     : "Gradle ${gradle.gradleVersion}",
       'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
       'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}")
    }
}

shadowJar {
   // https://docs.gradle.org/current/userguide/working_with_files.html
   destinationDir = file('deploy')
   // remove '-all' appendage
   classifier = null

   exclude '**/*.cljs'
   exclude '**/*.cljc'
   exclude '**/*.cljx'
   exclude '**/project.clj'
   exclude 'clojure/test/**'
}
