#! /bin/echo Please-source

#------------------------------------------------------------------------------------------
function gen_proj_pom() {
   cat << EOF  > "${FQ_APP_NS}.pom"
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.ballab1</groupId>
  <artifactId>${APP}</artifactId>
  <version>${REVISION}</version>
</project>
EOF
}

#------------------------------------------------------------------------------------------
function get_revision() {
   REVISION="$(< .revision)"
   APP="$(< .app-name)"
   FQ_APP_NS="${PKG_DIR}/${APP}-${REVISION}"
   FQ_APP="${FQ_APP_NS}.jar"
   FQ_DS_APP="${FQ_APP_NS}-ds.jar"
   FQ_CAPS_APP="${FQ_APP_NS}-caps.jar"
   FQ_1JAR_APP="${FQ_APP_NS}-1jar.jar"
}

#------------------------------------------------------------------------------------------
function is_docker_env_file_set() {
   if [ -z "${DOCKER_ENV_FILE:-}" ]; then
      echo "Please set DOCKER_ENV_FILE environment variable before invoking \"./run docker run\" command."
      echo "  e.g.: export DOCKER_ENV_FILE=~/.docker-env (chmod go-rwx)"
      exit -1
   fi
}

#------------------------------------------------------------------------------------------
function jenv() {
   uname="$(uname)"
   if [ "$uname" = 'Darwin' ] || [ "$uname" = 'Linux' ]; then
      open_jdk_home="$(find ~/tools/jdk-* -type d -name bin 2>/dev/null ||:)"

      if [ "$uname" = 'Darwin' ]; then
         graal_home="$(find ~/tools/graalvm-ce-* -type d -name Home 2>/dev/null ||:)"
      else
         graal_home="$(find ~/tools/graalvm-ce-* -type d -name jre 2>/dev/null ||:)"
      fi

      if [ "${graal_home:-}" ] && [ "$1" = 'graal' ]; then
         PATH="${graal_home}/bin:$PATH"
         JAVA_HOME="$graal_home"

      elif [ "${open_jdk_home:-}" ] && [ "$1" = 'ojdk' ]; then
         JAVA_HOME="$(dirname $open_jdk_home)"
         PATH="$JAVA_HOME/bin:$PATH"

      elif [ "$uname" = 'Darwin' ]; then
         JAVA_HOME="$(/usr/libexec/java_home -v "$uname")"

      elif [ "$uname" = 'Linux' ]; then
         sys_java="$(readlink -f "$(which java)")"
         JAVA_HOME="${sys_java%/bin/java}"
      fi

   elif [ "$uname" = 'FreeBSD' ]; then
      JAVA_VERSION=1.8
   fi
}

#------------------------------------------------------------------------------------------
# 'brew install coreutils' on OSX.
function random_unused_port {
   uname="$(uname)"
   if [ "$uname" = 'Darwin' ]; then
      shuffle=gshuf
      ns_options='-f inet -p tcp'
   else
      shuffle=shuf
      ns_options='-t'
   fi
   if [ "$uname" = 'FreeBSD' ]; then
      ns_options='-f inet -p tcp'
   fi
   (netstat -lan $ns_options |
    sed '1,2d; s/[^[:space:]]*[[:space:]]*[^[:space:]]*[[:space:]]*[^[:space:]]*[[:space:]]*[^[:space:]]*:\([0-9]*\)[[:space:]]*.*/\1/g' |
    sort -n | uniq; seq 1 1000; seq 1 65535
    ) | sort -n | uniq -u | $shuffle -n 2
 }

#------------------------------------------------------------------------------------------
function set_kafka_cluster() {
   if [ -z "${KAFKA_IP:-}" ]; then
      source bin/set-kafka-cluster "$1"
   else
      source bin/set-kafka-cluster host "$KAFKA_IP"
   fi
}

#------------------------------------------------------------------------------------------
function set_repl_ports() {
   # turn string into an array using \n as a delimiter
   OPEN_PORTS=( $(random_unused_port) )
   # export for init-cider.clj
   export NREPL_PORT="${OPEN_PORTS[0]}"
   REPL_PORT="${OPEN_PORTS[1]}"
   echo $NREPL_PORT > .nrepl-port  # vim-fireplace
   echo $REPL_PORT > .repl-port    # repl
}

#------------------------------------------------------------------------------------------
function set_revision() {
   # Only change revision if we have git available.
   # Assume no git available in a container.
   # Container will have .revision & .app-name copied in.
   if type -p 'git' > /dev/null; then
      git describe --tags --dirty > .revision
      # If git exited with an issue create a tag automatically
      if [ $? != 0 ]; then
         if [ -d .git ]; then
            echo "Auto creating tag v0.0 on first commit."
            # If multiple SHAs (submodule|subtree) assume last SHA is initial commit
            git tag v0.0 "$(git rev-list --max-parents=0 HEAD | tail -n 1)"
            # Try again
            set_revision
         else
            echo 'No git repository, revision set to 'No-Git'!'
            echo 'No-Git' > .revision
         fi
      fi
      APP="${PWD##*/}"
      echo "$APP" > .app-name
   fi
   get_revision
}

#------------------------------------------------------------------------------------------
# display stacktrace
function stacktrace()
{
    [[ ${trap_dying:-0} -ne 0 || ${trap_pipe_error:-0} -ne 0 ]] && return 0

    set +o nounset
    set +o verbose
    set +o xtrace

    echo >&2
    printf '\x1b[31m%s\x1b[0m\n' ">>>    Current directory $(pwd)" >&2
    # Print out the stack trace described by $function_stack
    if [ ${#FUNCNAME[@]} -gt 2 ]; then
        printf '\x1b[31m%s\x1b[0m\n' 'Stack trace:' >&2
        for ((i=1;i<${#FUNCNAME[@]}-1;i++)); do
            printf '\x1b[31m%s\x1b[0m\n' "$(printf '>>>    %02d: %s %s  <<<' "$i" "${BASH_SOURCE[$i+1]}:${BASH_LINENO[$i]}" "${FUNCNAME[$i]}" )" >&2
        done
    fi
    exit 1
}

#------------------------------------------------------------------------------------------

# vim: set ft=sh ts=3 sts=3 sw=3 tw=78 et:
